# Deploy Workflow - Marvel Champions BGG Analyzer

A systematic two-step deployment process for the Marvel Champions BGG data analysis project.

## Two-Step Deployment Process

For all code changes and feature additions to the Marvel Champions BGG Analyzer, follow this standardized two-step deployment workflow:

### Step 1: Documentation Update (AI-Driven)
**Before running any deployment scripts**, the AI assistant must:

1. **Analyze the changes made** - Review what code was modified, what features were added/fixed

2. **Update README.md** using current git information:
   - Add NEW entry to "Recent Improvements" section at the END of the README
   - Place new improvements at the TOP of the Recent Improvements list (reverse chronological order)
   - Use format for new entry: "### [Feature Name] (MMM DD, YYYY)" (use current date from git info, NO commit hash until next deployment)
   - **IMPORTANT: Commit ID Rule** - Only add commit hash to the PREVIOUS entry (not the current one being added)
   - Look for the MOST RECENT entry that lacks a commit hash and add it using the git interrogation output
   - The current new entry being added should NOT get a commit hash until the subsequent deployment
   - Include technical details about the implementation
   - Document user-facing improvements or bug fixes
   - Explain any new features or capabilities added

4. **Verify documentation accuracy** - Ensure the README reflects the current state of the analyzer

**README Structure Requirements:**
- Recent Improvements section MUST be at the END of the README (after Usage section)
- New improvements MUST be added at the TOP of the Recent Improvements section
- Most recent entry MUST have "(Latest)" suffix
- Previous entries should NOT have "(Latest)" suffix
- Use consistent formatting with bullet points and emoji indicators

**Commit ID Timing Pattern:**
- **New entries**: No commit hash initially (format: "### Feature Name (MMM DD, YYYY)")
- **Previous entries**: Add commit hash from git interrogation output (format: "### Feature Name (MMM DD, YYYY) - `abc1234`")
- **Logic**: Only the PREVIOUS most recent entry without a hash gets updated with its commit ID
- **Current entry**: Remains without hash until the NEXT deployment cycle
- **Why**: We can only know the commit hash AFTER the commit is made, so we update retroactively
2. **Verify documentation accuracy** - Ensure the README reflects the current state of the analyzer

### Step 2: Enhanced Automated Deployment (Script-Driven)
**After README is updated**, run the enhanced deployment script:

```bash
./scripts/deploy-changes-enhanced.sh "Brief commit title" "Detailed commit description"
```

The enhanced script handles:
- ✅ Virtual environment activation and Python validation
- ✅ **Git submodule management and updates**
- ✅ **Agent-rules integration and coordination**
- ✅ Code quality checks (syntax, imports, dependencies)
- ✅ Quick BGG API connectivity test
- ✅ Staging all changes (including updated README and submodules)
- ✅ Verification of staging
- ✅ Single-line commit with proper formatting
- ✅ Commit verification
- ✅ Push to GitHub
- ✅ Final verification of clean working tree

## Why This Two-Step Process?

### Step 1 (AI) Handles:
- **Contextual understanding** of what changed and why
- **Technical documentation** that requires reasoning about code changes
- **User impact assessment** - how changes affect BGG data analysis
- **Maintaining documentation quality** and consistency

### Step 2 (Script) Handles:
- **Python environment validation** and dependency checking
- **Mechanical git operations** that can be automated
- **Error checking** and verification at each step
- **Consistent commit formatting** and messaging
- **Safe deployment** with rollback capabilities

## Example Workflow

```bash
# 1. AI analyzes changes and updates README.md
# - Adds NEW entry: "### Enhanced Hero Matching (Jun 20, 2025)" (no hash)
# - Updates PREVIOUS entry: "### Multi-language Support (Jun 19, 2025) - `abc1234`" (adds hash from git log)
# - Current "Enhanced Hero Matching" will get its hash added in the NEXT deployment

# 2. Run deployment script (enhanced version recommended)
./scripts/deploy-changes-enhanced.sh "Enhanced hero matching algorithm" "Improved algorithm with submodule updates"

# Or use standard script for main repo only
./scripts/deploy-changes-enhanced.sh "Enhanced hero matching algorithm"
```

**README Update Pattern Example:**

Before deployment:
```markdown
### Multi-language Support (Jun 19, 2025)  # <-- This will get hash added
### BGG API Integration (Jun 18, 2025) - `xyz7890`
```

After README update (before deployment):
```markdown
### Enhanced Hero Matching (Jun 20, 2025)  # <-- New entry, no hash yet
### Multi-language Support (Jun 19, 2025) - `abc1234`  # <-- Hash added from git log
### BGG API Integration (Jun 18, 2025) - `xyz7890`
```

## Python-Specific Deployment Features

### Pre-deployment Validation
- **Virtual Environment Check**: Ensures .venv is activated
- **Python Version Validation**: Confirms Python 3.8+ compatibility
- **Dependency Verification**: Validates all requirements.txt packages
- **Import Testing**: Checks all imports resolve correctly
- **BGG API Connectivity**: Tests BoardGameGeek API access
- **Hero List Validation**: Verifies official hero list loading
- **Translation Service**: Tests Google Translate functionality

### Code Quality Checks
- **Syntax Validation**: Python syntax checking
- **Import Resolution**: All module imports validated
- **Function Calls**: Basic function signature validation
- **Data Structure Integrity**: JSON/XML parsing validation

## Benefits

- **Consistency**: Every deployment follows the same pattern
- **Documentation**: README always stays current with changes
- **Safety**: Each step is verified before proceeding
- **Python-specific**: Tailored for Python development workflows
- **BGG Integration**: Validates external API dependencies
- **Efficiency**: Automation handles repetitive tasks
- **Quality**: AI reasoning ensures meaningful documentation

## Rules for AI Assistant

1. **ALWAYS run test workflow first** before suggesting deployment
2. **Document the WHY** not just the what - explain user impact on BGG analysis
3. **Keep technical details** accurate and current for Python/BGG context
4. **Use clear, concise language** for user-facing documentation
5. **Verify deployment success** by checking git status after script execution
6. **Validate Python environment** before any code execution

### Terminal Output Analysis Protocol

When running `./scripts/deploy-changes-enhanced.sh`:

1. **Don't panic if `run_in_terminal` shows `(empty)`** - this often means success, not failure
2. **Parse the script's comprehensive output** which includes:
   - Step-by-step progress indicators (`🔄 Step X:`)
   - Success confirmations (`✅`) for each operation
   - Python environment validation results
   - BGG API connectivity status
   - Git operations results (staging, commit, push details)
   - Final verification data (status, log, sync state)
3. **Look for deployment success indicators** in the script output:
   - All steps showing `✅` completion
   - Python environment properly activated
   - BGG API test successful
   - Commit hash in `[branch hash] message` format
   - GitHub push confirmation with object counts
   - `DEPLOYMENT_SUCCESS=true` in final summary

### Expected Script Output Format

The script outputs structured data that can be parsed:

```
=== MARVEL CHAMPIONS BGG ANALYZER DEPLOYMENT ===
🔄 Step 1: Python Environment Validation
✅ Virtual environment activated: /Users/jo/globalbggchamps/.venv
✅ Python version: 3.11.12
✅ Dependencies validated: 22 packages

🔄 Step 2: BGG API Connectivity Test
✅ BGG API accessible
✅ Official hero list loaded: 61 heroes
✅ Translation service active

🔄 Step 3: Code Quality Validation
✅ Python syntax check passed
✅ Import resolution successful
✅ No critical issues found

--- GIT STATUS ---
STATUS: CLEAN

--- REMOTE SYNC ---
SYNC_STATUS: UP_TO_DATE

--- RECENT COMMITS ---
Last 3 commits:
  abc1234 📊 Enhanced hero matching algorithm
  def5678 🌍 Add multi-language support  
  ghi9012 🔍 Initial BGG data analyzer

--- DEPLOYMENT SUMMARY ---
OVERALL_STATUS: SUCCESS
WORKING_TREE: CLEAN
SYNC_STATUS: UP_TO_DATE
DEPLOYMENT_SUCCESS: true
=== END DEPLOYMENT REPORT ===
```

### Success Confirmation Checklist

After running deploy script, AI must verify:
- [ ] `git status` shows clean working tree
- [ ] `git log` shows new commit with expected message
- [ ] Python environment validation passed
- [ ] BGG API connectivity confirmed
- [ ] No error messages in terminal output
- [ ] All expected files were committed

## AI Assistant Deployment Verification

After running the deploy script, the AI assistant must:

1. **Parse Script Output** - The deploy script provides comprehensive verification data:
   - Python environment validation with version and package counts
   - BGG API connectivity test results
   - Git staging results with file counts
   - Commit creation with hash and message
   - GitHub push confirmation with transfer details
   - Final git status showing "working tree clean"
   - Summary with STATUS, SYNC_STATUS, and DEPLOYMENT_SUCCESS flags

2. **Look for Success Indicators** in the script's terminal output:
   - `✅` checkmarks for each successful step
   - Python environment properly activated
   - BGG API test successful
   - `[branch hash] commit message` format confirming commit
   - `remote: Resolving deltas: 100%` indicating successful push
   - `DEPLOYMENT_SUCCESS=true` in final summary
   - `STATUS: CLEAN` showing clean working tree

3. **Avoid Duplicate Commands** - The script already runs and outputs:
   - Python environment validation
   - BGG API connectivity test
   - `git status` results
   - `git log --oneline -2` for recent commits
   - All necessary verification data

4. **Report Deployment Status** - Based on parsing script output only:
   - Confirm successful deployment
   - Identify any failures from script output
   - Summarize what was deployed (commit hash, files changed, etc.)
   - Report Python environment status
   - Confirm BGG API connectivity

**No additional git commands needed** - the script provides all verification data.

## Rules for Developer

1. **Never skip Step 1** - documentation and testing are not optional
2. **Review README changes** before running deployment script
3. **Use descriptive commit messages** that match the README updates
4. **Verify BGG analyzer functionality** before deploying changes
5. **Ensure virtual environment** is properly configured
6. **Test with actual BGG data** to validate changes

## Python Environment Requirements

### Pre-deployment Checklist
- [ ] Virtual environment (.venv) exists and activates properly
- [ ] Python 3.8+ is available
- [ ] All requirements.txt dependencies installed
- [ ] BGG API is accessible
- [ ] Google Translate service is functional
- [ ] Official hero list loads successfully

### Post-deployment Validation
- [ ] Script runs without errors in clean environment
- [ ] BGG data fetching works correctly
- [ ] Hero matching and translation functions properly
- [ ] Color-coded output displays correctly
- [ ] All test scenarios pass
